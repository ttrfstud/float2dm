{
  "name": "taptap",
  "version": "0.0.3",
  "description": "simple testing function",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ttrfstud/taptap.git"
  },
  "bugs": {
    "url": "https://github.com/ttrfstud/taptap/issues"
  },
  "readme": "taptap\n===========\ntaptap is simple testing function. you give a test function with \"done\" param. like that:\n\n```javascript\nvar test = require('taptap');\nvar assert = require('assert');\n\ntest(function (done) {\n  assert(1);\n  done();\n});\n```\n\nyou should always call \"done\". taptap will timeout in 2s, you can't alter it.\n\ntaptap produces results in tap format (i suppose..).\n\nthere may be two reasons when test failed:\n\n * there were uncaught exceptions in your test functions. like those produced by assertions, for example\n * your test function did not call \"done\"\n\nin these cases taptap will output stacktrace for the first case and \"hanger\" test function source code in the second case.\n\ntaptap writes to stdout but you could give it another stream to write to if you want. call .pipe on it, like this\n\n```javascript\nvar test = require('taptap');\nvar stream = require('stream').Transform;\n\ntest.pipe(new stream).pipe(new stream);\n\n[your tests...]\n```\n\nyou could also .skip and .todo tests. like this:\n\n```javascript\nvar test = require('taptap');\n\ntest.skip(function () {\n});\n\ntest.todo(function () {\n  throw new Error;\n});\n```\n\nskip tests are always \"ok\", todo tests may be either \"not ok\" (if they don't pass) or \"ok\" if they pass (gives bonus!).\n\nplease check that your test functions are indeed functions!",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/ttrfstud/taptap",
  "_id": "taptap@0.0.3",
  "_from": "taptap@"
}
